* to create SQLAlchemy : python -m  pip install flask-sqlalchemy
* to use migration of flask : python -m pip install Flask-Migrate
* use migrate commands :
    flask db init        # initialize Alembic   : create migration folder
    flask db migrate  -m "message"   # detect schema changes   : it will create migration table inside migrations/versions
    flask db upgrade     # apply changes to DB  : create table in mysql database


* connected with flask sqlalchemy : 'mysql://username:password@localhost/db_name'

* Alembic is a database migration tool for Python applications that use SQLAlchemy.
Alembic is like a version control system for your database schema — similar to how Git tracks your code changes, Alembic tracks changes to your database tables and columns over time.

* __init__.py : Marks a folder as a Python package
and inside this add files name like from myapp import routes


* @app.context_processor
def inject_urls():
    return {key: app.config[key] for key in ['FB_URL', 'TW_URL', 'GT_URL']}

context_processor as a global variables provider for Jinja templates.You write it once, and it works everywhere — all templates get the variables without explicitly passing them.
you donot need to pass the variables manually in every route like below:
@app.route('/')
def home():
    return render_template('index.html', FB_URL=app.config['FB_URL'])


*  pip install flask-mail   : for sending mail
* for sending mail activate app password